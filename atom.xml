<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>codecat blog</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2023-03-22T10:43:00.328Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>codecat</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>SSH协议及相关命令简单总结</title>
    <link href="http://example.com/2023/03/22/SSH%E5%8D%8F%E8%AE%AE%E5%8F%8A%E7%9B%B8%E5%85%B3%E7%94%A8%E6%B3%95%E7%AE%80%E5%8D%95%E6%80%BB%E7%BB%93/"/>
    <id>http://example.com/2023/03/22/SSH%E5%8D%8F%E8%AE%AE%E5%8F%8A%E7%9B%B8%E5%85%B3%E7%94%A8%E6%B3%95%E7%AE%80%E5%8D%95%E6%80%BB%E7%BB%93/</id>
    <published>2023-03-22T10:43:12.112Z</published>
    <updated>2023-03-22T10:43:00.328Z</updated>
    
    <content type="html"><![CDATA[<p>1 简介<br>　　SSH（安全外壳协议，Secure Shell 的缩写）由 IETF 的网络小组（Network Working Group）所制定，是建立在应用层基础上的安全协议。SSH 是目前较可靠，专为远程登录会话和其他网络服务提供安全性的协议，利用 SSH 协议可以有效防止远程管理过程中的信息泄露问题。SSH 最初是 UNIX 系统上的一个程序，后来又迅速扩展到其他操作平台。SSH 客户端适用于多种平台，几乎所有 UNIX 平台都可运行 SSH。</p><p>2 作用<br>　　传统的网络服务程序，如：FTP、POP 和 Telnet 在本质上都是不安全的，因因为它们在网络上用明文传送口令和数据，别有用心的人非常容易就可以截获这些口令和数据。而且，这些服务程序的安全验证方式也是有其弱点的， 就是很容易受到“中间人攻击”（Man-in-the-middle attack）。</p><pre><code>    所谓“中间人攻击”， 就是“中间人”冒充真正的服务器接收你传给服务器的数据，然后再冒充你把数据传给真正的服务器。服务器和你之间的数据传送被“中间人”一转手做了手脚之后，就会出现很严重的问题。通过使用 SSH，你可以把所有传输的数据进行加密，这样”中间人”这种攻击方式就不可能实现了，而且也能够防止 DNS 欺骗和 IP 欺骗。使用 SSH，还有一个额外的好处就是传输的数据是经过压缩的，所以可以加快传输的速度。</code></pre><p><strong><strong>3 层次</strong></strong></p><p>SSH 主要由三部分组成：传输层协议 [SSH-TRANS]、用户认证协议 [SSH-USERAUTH] 和连接协议 [SSH-CONNECT] 组成。</p><pre><code>  传输层协议 [SSH-TRANS]：提供了服务器认证，保密性及完整性。此外它有时还提供压缩功能。 SSH-TRANS 通常运行在 TCP/IP 连接上，也可能用于其它可靠数据流上。 SSH-TRANS 提供了强力的加密技术、密码主机认证及完整性保护。该协议中的认证基于主机，并且该协议不执行用户认证。更高层的用户认证协议可以设计为在此协议之上。    用户认证协议 [SSH-USERAUTH]：用于向服务器提供客户端用户鉴别功能，它运行在传输层协议 SSH-TRANS 上面。当 SSH-USERAUTH 开始后，它从低层协议那里接收会话标识符，会话标识符唯一标识此会话并且适用于标记以证明私钥的所有权。 SSH-USERAUTH 也需要知道低层协议是否提供保密性保护。    连接协议 [SSH-CONNECT]：将多个加密隧道分成逻辑通道。它运行在用户认证协议上。它提供了交互式登录话路、远程命令执行、转发 TCP/IP 连接和转发 X11 连接。</code></pre><p><strong><strong>4 用法</strong></strong></p><p><strong><strong>4.1 基本操作</strong></strong></p><p>SSH 主要用于<a href="https://so.csdn.net/so/search?q=%E8%BF%9C%E7%A8%8B%E7%99%BB%E5%BD%95&spm=1001.2101.3001.7020">远程登录</a>。假定我们要以用户名<code>user</code>登录远程主机<code>host，</code>只要一条简单命令就可以啦！</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh user@host</span><br></pre></td></tr></table></figure><p>如果本地用户名与远程用户名一致，登录时可以省略用户名。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh host</span><br></pre></td></tr></table></figure><p>SSH 的默认端口是<code>22</code>，也就是说，我们的登录请求会送进远程主机的<code>22</code>端口。使用<code>p</code>参数，可以修改这个端口。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh -p <span class="number">2222</span> user@host</span><br></pre></td></tr></table></figure><p>上面这条命令表示，SSH 直接连接远程主机的<code>2222</code>端口。</p><p><strong><strong>4.2 口令登录</strong></strong></p><p>如果我们是第一次登录对方主机，系统会出现下面的提示：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ ssh user@host</span><br><span class="line">The authenticity of host <span class="string">&#x27;host (12.18.81.21)&#x27;</span> can<span class="number">&#x27;</span>t be established.</span><br><span class="line">RSA key fingerprint is <span class="number">98</span>:<span class="number">2</span>e:d7:e0:de:<span class="number">9f</span>:ac:<span class="number">67</span>:<span class="number">28</span>:c2:<span class="number">42</span>:<span class="number">2</span>d:<span class="number">37</span>:<span class="number">16</span>:<span class="number">58</span>:<span class="number">4</span>d.</span><br><span class="line">Are you sure you want to <span class="keyword">continue</span> <span class="title function_">connecting</span> <span class="params">(yes/no)</span>?</span><br></pre></td></tr></table></figure><p>这段话的意思是，无法确认 host 主机的真实性，只知道它的公钥指纹，问你还想继续连接吗？</p><p>所谓”公钥指纹”，是指公钥长度较长（这里采用 RSA 算法，长达 1024 位），很难比对，所以对其进行 MD5 计算，将它变成一个 128 位的指纹。上例中是98:2e:d7:e0:de:9f:ac:67:28:c2:42:2d:37:16:58:4d，再进行比较，就容易多啦！很自然想到的一个问题就是，用户怎么知道远程主机的公钥指纹应该是多少？回答是没有好办法，远程主机必须在自己的网站上贴出公钥指纹，以便用户自行核对。假定经过风险衡量以后，用户决定接受这个远程主机的公钥。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Are you sure you want to <span class="keyword">continue</span> <span class="title function_">connecting</span> <span class="params">(yes/no)</span>? yes</span><br></pre></td></tr></table></figure><p>系统会出现一句提示，表示 host 主机已经得到认可。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Warning: Permanently added <span class="string">&#x27;host,12.18.429.21&#x27;</span> (RSA) to the <span class="built_in">list</span> of known hosts.</span><br></pre></td></tr></table></figure><p>然后，会要求输入密码。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Password: (enter password)</span><br></pre></td></tr></table></figure><p>如果密码正确，就可以登录了。</p><p>当远程主机的公钥被接受以后，它就会被保存在文件$HOME&#x2F;.ssh&#x2F;known_hosts之中。下次再连接这台主机，系统就会认出它的公钥已经保存在本地了，从而跳过警告部分，直接提示输入密码。每个 SSH 用户都有自己的known_hosts文件，此外系统也有一个这样的文件，通常是&#x2F;etc&#x2F;ssh&#x2F;ssh_known_hosts，保存一些对所有用户都可信赖的远程主机的公钥。</p><p><strong><strong>4.3 公钥登录</strong></strong></p><pre><code>   使用密码登录，每次都必须输入密码，非常麻烦。好在 SSH 还提供了公钥登录，可以省去输入密码的步骤。    所谓”公钥登录”，原理很简单，就是用户将自己的公钥储存在远程主机上。登录的时候，远程主机会向用户发送一段随机字符串，用户用自己的私钥加密后，再发回来。远程主机用事先储存的公钥进行解密，如果成功，就证明用户是可信的，直接允许登录 shell，不再要求密码。这种方法要求用户必须提供自己的公钥。如果没有现成的，可以直接用ssh-keygen生成一个：</code></pre><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen</span><br></pre></td></tr></table></figure><p>运行上面的命令以后，系统会出现一系列提示，可以一路回车。其中有一个问题是，要不要对私钥设置口令（passphrase），如果担心私钥的安全，这里可以设置一个。运行结束以后，在$HOME&#x2F;.ssh&#x2F;目录下，会新生成两个文件：id_rsa.pub和id_rsa。前者是你的公钥，后者是你的私钥。这时再输入下面的命令，将公钥传送到远程主机 host 上面：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-copy-id user@host</span><br></pre></td></tr></table></figure><p>好了，从此我们再登录，就不需要输入密码了。如果还是不行，就打开远程主机的<code>/etc/ssh/sshd_config</code>这个文件，检查下面几行前面<code>#</code>注释是否取掉。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">RSAAuthentication yes</span><br><span class="line">PubkeyAuthentication yes</span><br><span class="line">AuthorizedKeysFile .ssh/authorized_keys</span><br></pre></td></tr></table></figure><p>然后，重启远程主机的 SSH 服务。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* ubuntu系统 */</span></span><br><span class="line">service ssh restart</span><br><span class="line"><span class="comment">/* debian系统 */</span></span><br><span class="line">/etc/init.d/ssh restart</span><br></pre></td></tr></table></figure><p><strong><strong>4.4 authorized_keys文件</strong></strong></p><p>远程主机将用户的公钥，保存在登录后的用户主目录的<code>$HOME/.ssh/authorized_keys</code><br>文件中。公钥就是一段字符串，只要把它追加在<code>authorized_keys</code>文件的末尾就行了。这里不使用上面的<code>ssh-copy-id</code>命令，改用下面的命令，解释公钥的保存过程</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh user@host <span class="string">&#x27;mkdir -p .ssh &amp;&amp; cat &gt;&gt; .ssh/authorized_keys&#x27;</span> &lt; ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure><p>这条命令由多个语句组成，依次分解开来看：</p><ul><li>$ ssh user@host，表示登录远程主机；</li><li>单引号中的mkdir .ssh &amp;&amp; cat &gt;&gt; .ssh&#x2F;authorized_keys，表示登录后在远程 Shell 上执行的命令：</li><li>$ mkdir -p .ssh”的作用是，如果用户主目录中的.ssh&#96;目录不存在，就创建一个；</li><li>cat &gt;&gt; .ssh&#x2F;authorized_keys &lt; <del>&#x2F;.ssh&#x2F;id_rsa.pub的作用是，将本地的公钥文件</del>&#x2F;.ssh&#x2F;id_rsa.pub，重定向追加到远程文件authorized_keys的末尾。</li></ul><p>写入<code>authorized_keys</code>文件后，公钥登录的设置就完成啦！</p><p><strong><strong>4.5 绑定本地端口</strong></strong></p><pre><code>    既然 SSH 可以传送数据，那么我们可以让那些不加密的网络连接，全部改走 SSH 连接，从而提高安全性。假定我们要让`8080`端口的数据，都通过 SSH 传向远程主机，命令就这样写：</code></pre><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh -D <span class="number">8080</span> user@host</span><br></pre></td></tr></table></figure><pre><code>  SSH 会建立一个 Socket，去监听本地的`8080`端口。一旦有数据传向那个端口，就自动把它转移到 SSH 连接上面，发往远程主机。可以想象，如果`8080`端口原来是一个不加密端口，现在将变成一个加密端口。</code></pre><p><strong><strong>4.6 本地端口转发</strong></strong></p><pre><code>   有时，绑定本地端口还不够，还必须指定数据传送的目标主机，从而形成点对点的”端口转发”。为了区别后文的”远程端口转发”，我们把这种情况称为“本地端口转发（Local forwarding）”。    假定 host1 是本地主机，host2 是远程主机。由于种种原因，这两台主机之间无法连通。但是，另外还有一台 host3，可以同时连通前面两台主机。因此，很自然的想法就是：通过 host3，将 host1 连上 host2。我们在 host1 执行下面的命令</code></pre><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh -L <span class="number">2121</span>:host2:<span class="number">21</span> host3</span><br></pre></td></tr></table></figure><pre><code>   命令中的L参数一共接受三个值，分别是本地端口:目标主机:目标主机端口，它们之间用冒号分隔。这条命令的意思，就是指定 SSH 绑定本地端口2121，然后指定 host3 将所有的数据，转发到目标主机 host2 的21端口（假定 host2 运行 FTP，默认端口为21）。这样一来，我们只要连接 host1 的2121端口，就等于连上了 host2 的21端口。</code></pre><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ftp localhost:<span class="number">2121</span></span><br></pre></td></tr></table></figure><p>“本地端口转发”使得 host1 和 host3 之间仿佛形成一个数据传输的秘密隧道，因此又被称为”SSH 隧道”。下面是一个比较有趣的例子。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh -L <span class="number">5900</span>:localhost:<span class="number">5900</span> host3</span><br></pre></td></tr></table></figure><p>它表示将本机的<code>5900</code>端口绑定 host3 的<code>5900</code>端口（这里的 localhost 指的是 host3，因为目标主机是相对 host3 而言的）。另一个例子是通过 host3 的端口转发，SSH 登录 host2。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh -L <span class="number">9001</span>:host2:<span class="number">22</span> host3</span><br></pre></td></tr></table></figure><p>这时，只要 SSH 登录本机的<code>9001</code>端口，就相当于登录 host2 了。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh -p <span class="number">9001</span> localhost</span><br></pre></td></tr></table></figure><p> 上面的<code>-p</code>参数表示指定登录端口。</p><p><strong><strong>4.7 远程端口转发</strong></strong></p><pre><code>   既然”本地端口转发”是指绑定本地端口的转发，那么“远程端口转发（Remote forwarding）”当然是指绑定远程端口的转发。    还是接着看上面那个例子，host1 与 host2 之间无法连通，必须借助 host3 转发。但是，特殊情况出现了，host3 是一台内网机器，它可以连接外网的 host1，但是反过来就不行，外网的 host1 连不上内网的 host3。这时，本地端口转发就不能用了，怎么办？     解决办法是，既然 host3 可以连 host1，那么就从 host3 上建立与 host1 的 SSH 连接，然后在 host1 上使用这条连接就可以了。我们在 host3 执行下面的命令：</code></pre><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh -R <span class="number">2121</span>:host2:<span class="number">21</span> host1</span><br></pre></td></tr></table></figure><pre><code>    R参数也是接受三个值，分别是远程主机端口:目标主机:目标主机端口。这条命令的意思，就是让 host1 监听它自己的2121端口，然后将所有数据经由 host3，转发到 host2 的21端口。由于对于 host3 来说，host1 是远程主机，所以这种情况就被称为远程端口绑定。绑定之后，我们在host1就可以连接 host2 了：</code></pre><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ftp localhost:<span class="number">2121</span></span><br></pre></td></tr></table></figure><p><strong><strong>4.8 SSH的其他参数</strong></strong></p><pre><code>    SSH 还有一些别的参数，也值得介绍。`N`参数，表示只连接远程主机，不打开远程 Shell；`T`</code></pre><p>参数，表示不为这个连接分配 TTY。这个两个参数可以放在一起用，代表这个 SSH 连接只用来传数据，不执行远程操作。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh -NT -D <span class="number">8080</span> host</span><br></pre></td></tr></table></figure><p><code>f</code>参数，表示 SSH 连接成功后，转入后台运行。这样一来，你就可以在不中断 SSH 连接的情况下，在本地 Shell 中执行其他操作。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh -f -D <span class="number">8080</span> host</span><br></pre></td></tr></table></figure><p>要关闭这个后台连接，只能用<code>kill</code><br>命令去杀掉进程。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;1 简介&lt;br&gt;　　SSH（安全外壳协议，Secure Shell 的缩写）由 IETF 的网络小组（Network Working Group）所制定，是建立在应用层基础上的安全协议。SSH 是目前较可靠，专为远程登录会话和其他网络服务提供安全性的协议，利用 SSH 协议</summary>
      
    
    
    
    <category term="/小书匠/日记/2023-03" scheme="http://example.com/categories/%E5%B0%8F%E4%B9%A6%E5%8C%A0-%E6%97%A5%E8%AE%B0-2023-03/"/>
    
    
    <category term="计算机网络" scheme="http://example.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>Welcome to codecat blog</title>
    <link href="http://example.com/2022/04/12/hello-world/"/>
    <id>http://example.com/2022/04/12/hello-world/</id>
    <published>2022-04-12T11:42:45.051Z</published>
    <updated>2022-04-12T12:56:18.600Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
